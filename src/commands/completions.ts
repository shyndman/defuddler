import { Program } from '@caporal/core';
import chalk from 'chalk';
import { ShellType } from '../types/index.js';

/**
 * Sets up the completions command for the CLI
 *
 * Caporal uses tabtab under the hood for shell completions.
 * This command generates shell-specific completion scripts that can be
 * sourced by the user's shell to enable tab completion.
 */
export function setupCompletionsCommand(program: Program): void {
  program
    .command('completions', 'Generate shell completions')
    .argument('<shell>', 'Shell type (zsh, bash, fish)', {
      validator: program.STRING
    })
    .action(async ({ args, logger }) => {
      const shell = args.shell as ShellType;
      logger.debug('Generating completions for shell: %s', shell);

      try {
        // Caporal uses tabtab for completions
        // When using the completion command, we need to output the raw completion script
        // without any logger formatting or prefixes

        // Instead of using logger, we use console.log for the actual completion script
        // This ensures the output can be properly redirected to a file

        // This is a placeholder - in a real implementation, we would generate
        // shell-specific completion scripts using tabtab
        console.log(`# Shell completion script for defuddle (${shell})`);
        console.log('# This is a placeholder for the actual completion script');
        console.log('# In a real implementation, this would be generated by tabtab');

        // Log instructions to stderr so they don't interfere with redirection
        console.error(chalk.green(`\n${shell} completion script generated.`));
        console.error(chalk.yellow(`To use, add it to your ${shell} configuration:`));

        const programName = 'defuddle';
        switch (shell) {
          case 'bash':
            console.error(chalk.yellow(`  ${programName} completions bash > ~/.bash_completion.d/${programName}`));
            console.error(chalk.yellow(`  echo 'source ~/.bash_completion.d/${programName}' >> ~/.bashrc`));
            break;
          case 'zsh':
            console.error(chalk.yellow(`  ${programName} completions zsh > ~/.zsh/completions/_${programName}`));
            console.error(chalk.yellow('  # Make sure ~/.zsh/completions is in your fpath before compinit'));
            break;
          case 'fish':
            console.error(chalk.yellow(`  ${programName} completions fish > ~/.config/fish/completions/${programName}.fish`));
            break;
        }

      } catch (error: unknown) {
        const errorMessage = error && typeof error === 'object' && 'message' in error
          ? (error as { message?: string; }).message
          : 'An unknown error occurred';
        logger.error(chalk.red(`Error: ${errorMessage || 'An unknown error occurred'}`));
        process.exit(1);
      }
    });
}
